𝗤𝟭. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗳𝗶𝗻𝗱 𝗳𝗮𝗰𝘁𝗼𝗿𝗶𝗮𝗹 𝗼𝗳 𝘁𝗵𝗲 𝗻𝘂𝗺𝗯𝗲𝗿 𝗲𝗻𝘁𝗲𝗿𝗲𝗱 𝗯𝘆 𝘁𝗵𝗲 𝘂𝘀𝗲𝗿.
import java.util.*;
class factorial
{
public static int facto(int num1){
if(num1==1)
{
return num1;
}
else
{
return num1*facto(num1-1);
}
}
}
class testfact{
public static void main(String args[])
{
int num,i,fact;
fact=1;
factorial f1=new factorial();
Scanner sc=new Scanner(System.in);
System.out.println("*******Factorial*******");
System.out.println("Enter the number of which factorial do you want?");
System.out.print("Num=");
num=sc.nextInt();
while(num<=0)
{
System.out.println("Enter the number that should be greater than zero");
System.out.println("Number=");
num=sc.nextInt();
}
fact=f1.facto(num);
System.out.println("Factorial of  the number is"+fact);
}
}


𝗤𝟮. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗿𝗲𝘃𝗲𝗿𝘀𝗲 𝗮 𝗻𝘂𝗺𝗯𝗲𝗿.
import java.util.*;
class reverse
{
public static void main(String args[])
{
int rev_num=0,rem=0;
System.out.println("****Reverse number****");
Scanner sc=new Scanner(System.in);
System.out.println("Enter the number");
System.out.print("Num=");
int num=sc.nextInt();
while(num<=0)
{
System.out.println("Number should be graeter than nine");
System.out.print("Num=");
num=sc.nextInt();
}
if(num<9){
rev_num=num;
}
else
{
while(num>0){
rem=num%10;
rev_num=rev_num*10+rem;
num=num/10;
}
}
System.out.println("Reverse of the number"+rev_num);
}
}


𝗤𝟯. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗳𝗶𝗻𝗱 𝗳𝗶𝗯𝗯𝗼𝗻𝗮𝗰𝗰𝗶 𝘀𝗲𝗿𝗶𝗲𝘀 𝗼𝗳 𝗮 𝗴𝗶𝘃𝗲𝗻 𝗻𝘂𝗺𝗯𝗲𝗿.
import java.util.*;
class fibbonaci
{
public static void main(String args[])
{
Scanner sc=new Scanner(System.in);
System.out.println("Enter the limite for the fibbonaci series");
System.out.print("limite=");
int limit=sc.nextInt();
while(limit<=0){
System.out.println("Limite should be graeter than 0");
System.out.print("limit=");
limit=sc.nextInt();}
int a0,a1,temp,a2;
a0=0;
a1=1;
if(limit==1)
{
System.out.println(a0+" ");
}
else
{
System.out.println(a0+" ");
System.out.println(a1+" ");
while(limit-2>0){
a2=a1+a0;
a0=a1;
a1=a2;
System.out.println(a2+" ");
limit=limit-1;
}
}
}
}


𝗤𝟰. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗽𝗿𝗶𝗻𝘁 𝘁𝗵𝗲 𝗺𝘂𝗹𝘁𝗶𝗽𝗹𝗶𝗰𝗮𝘁𝗶𝗼𝗻 𝘁𝗮𝗯𝗹𝗲.
import java.util.*;
class multable
{
public static void main(String args[])
{
Scanner sc=new Scanner(System.in);
int num,i;
System.out.println("Enter the number of which multiplication table do want?");
num=sc.nextInt();
while(num<=0){
System.out.println("For table enter any posstive integer");
System.out.println("num=");
num=sc.nextInt();}
System.out.println("****Multiplication table of "+num);
for(i=1;i<=10;i++){
System.out.println(num+"*"+i+"="+(num*i));
}
}
} 


𝗤𝟱. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗰𝗵𝗲𝗰𝗸 𝘄𝗵𝗲𝘁𝗵𝗲𝗿 𝘁𝗵𝗲 𝗲𝗻𝘁𝗲𝗿𝗲𝗱 𝗻𝘂𝗺𝗯𝗲𝗿 𝗶𝘀 𝗽𝗿𝗶𝗺𝗲 𝗼𝗿 𝗻𝗼𝘁.
import java.util.*;
class prime
{
public static void main(String args[])
{
Scanner sc=new Scanner(System.in);
int num,i,flag=0;
System.out.println("Enter the number");
System.out.println("num=");
num=sc.nextInt();
while(num<=0)
{
System.out.println("Enter the numer that should be graeter than zero");
System.out.println("num=");
num=sc.nextInt();}
if(num==1)
{
System.out.println("It is neither prime nor non-prime");
}
else{
for(i=2;i<num;i++)
{
if(num%i==0)
{
flag=1;
break;
}
}
if(flag==1)
{
System.out.println(num+" is not a prime number");
}
else
{
System.out.println(num+" is a prime number");
}
}
}
}


𝗤𝟲. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗰𝗵𝗲𝗰𝗸 𝘄𝗵𝗲𝘁𝗵𝗲𝗿 𝘁𝗵𝗲 𝗲𝗻𝘁𝗲𝗿𝗲𝗱 𝗻𝘂𝗺𝗯𝗲𝗿 𝗶𝘀 𝗽𝗮𝗹𝗶𝗻𝗱𝗿𝗼𝗺𝗲 𝗼𝗿 𝗻𝗼𝘁.
import java.util.*;
class palindrome
{
public static void main(String args[])
{
int num,my_num=0,rev_num=0,i,j,rem=0;
Scanner sc=new Scanner(System.in);
System.out.println("Enter the number to check whether the number is palindrome or not");
System.out.print("num=");
num=sc.nextInt();
my_num=num;
while(num<=0)
{
System.out.println("Enter any number that should be greater than zero");
System.out.print("num=");
num=sc.nextInt();
}
while(num>0)
{
rem=num%10;
rev_num=rev_num*10+rem;
num=num/10;
}
if(rev_num==my_num)
{
System.out.print("Entered number is palindrome");
}
else
{
System.out.print("Entered number is not palindrome");
}
}
}


𝗤𝟳. 𝗣𝗿𝗶𝗻𝘁 𝘁𝗿𝗶𝗮𝗻𝗴𝗹𝗲 𝗮𝘀 𝗳𝗼𝗹𝗹𝗼𝘄𝘀
𝟬
𝟭 𝟬
𝟭 𝟬 𝟭
𝟬 𝟭 𝟬 𝟭
class pattern
{
public static void main(String args[])
{
int i,j,flag=0;
for(i=1;i<=4;i++)
{
for(j=1;j<=i;j++)
{
System.out.print(" "+flag);
if(flag==0)
{
flag=1;
}
else
{
flag=0;
}
}
System.out.println(" ");
}
}
}


𝗤𝟴. 𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝗼𝗳 𝗼𝗻𝗲𝗱𝗶𝗺𝗲𝗻𝘀𝗶𝗼𝗻𝗮𝗹 𝗮𝗿𝗿𝗮𝘆.
class ex9
{
public static void main(String args[])
{
int i,j;
int a[]=new int[3];
char[] c=new char[3];
float[] f=new float[3];
double d[]=new double[3];
int a1[]={1,2,3};
char c1[]={'a','b','c'};
float f1[]={1.0f,1.1f,1.2f};
double d1[]={2.0,2.1,2.2};
System.out.println("length of array a is"+a.length);
System.out.println("and a1 is"+a1.length);
System.out.println("length of array c is"+c.length);
System.out.println("and c1 is"+c1.length);
System.out.println("length of array f is"+f.length);
System.out.println("and f1 is"+f1.length);
System.out.println("length of array d is"+d.length);
System.out.println("and a1 is"+a1.length);
for(i=0;i<a.length;i++)
{
System.out.println("a["+i+"]="+a[i]);
System.out.print("\ta1["+i+"]="+a1[i]);
}
for(i=0;i<c.length;i++)
{
System.out.println("c["+i+"]="+c[i]);
System.out.print("\tc1["+i+"]="+c1[i]);
}
for(i=0;i<f.length;i++)
{
System.out.println("f["+i+"]="+f[i]);
System.out.print("\tf1["+i+"]="+f1[i]);
}
for(i=0;i<d.length;i++)
{
System.out.println("d["+i+"]="+d[i]);
System.out.print("\td1["+i+"]="+d1[i]);
}
}
}


𝗤𝟵. 𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝗼𝗳 𝘁𝘄𝗼 𝗱𝗶𝗺𝗲𝗻𝘀𝗶𝗼𝗻𝗮𝗹 𝗮𝗿𝗿𝗮𝘆.
class ex10
{
public static void main(String args[])
{
int a[][]=new int[2][3];
int b[][]=
{
{11,12,13},
{21,22,23},
{31,32,33},
};
System.out.println("Elements in the array a are");
for(int i=0;i<a.length;i++)
{
for(int j=0;j<a[i].length;j++)
{
System.out.println("a["+i+"]["+j+"]="+a[i][j]);
System.out.println("\t\t");
}
}
System.out.println("\n\n Elements in b are\n");
for(int i=0;i<b.length;i++)
{
for(int j=0;j<b[i].length;j++)
{
System.out.println("b["+i+"]"+j+"]="+b[i][j]);
System.out.println("\t\t");
}
}
}
}



𝗤𝟭𝟬.
import java.lang.*;
public class mol{
public static void main(String args[]){
new Test().dooverload();
}
}
class Test
{
public void dooverload()
{
int x=7;
double y=11.4;
System.out.println(square(x)+"\n"+square(y));
}
public int square(int y)
{
return y*y;
}
public double square(double y){
return y*y;
}
}


𝗤𝟭𝟭. 𝗠𝗲𝘁𝗵𝗼𝗱 𝗼𝘃𝗲𝗿𝗿𝗶𝗱𝗶𝗻𝗴 𝗲𝘅𝗮𝗺𝗽𝗹𝗲
class A
{
int a,b;
public A(int x,int y)
{
a=x;
b=y;
}
public void add()
{
System.out.println("calling add function from the super class");
System.out.println("Addition of the numbers "+a+" and "+b+" is"+(a+b));
}
}
class B extends A{
int c;
public B(int x,int y,int z){
super(x,y);
c=z;}
public void add(){
System.out.println("calling add function from the sub class");
System.out.println("Addition of the numbers "+a+" ,"+b+" and"+c+" is"+(a+b+c));
}
}
class overridedemo{
public static void main(String ar[]){
A obj= new A(3,4);
obj.add();
B obj1=new B(4,5,6);
obj1.add();
}
}


𝗤𝟭𝟮. 𝗗𝗲𝗺𝗼 𝗼𝗳 𝗰𝗼𝗻𝘀𝘁𝗿𝘂𝗰𝘁𝗼𝗿 𝗽𝗿𝗼𝗴𝗿𝗮𝗺.
class area
{
double rad;
double ar;
public area(double r)
{
rad=r;
}
public double func_area(){
ar=Math.PI*rad*rad;
return ar;
}
}
class cons_demo{
public static void main(String ar[]){
area a=new area(1);
double area1=a.func_area();
System.out.println("area of the circle is "+area1);
}
}


𝗤𝟭𝟯. 𝗣𝗿𝗼𝗴𝗿𝗮𝗺 𝗶𝗺𝗽𝗹𝗲𝗺𝗲𝗻𝘁𝗶𝗻𝗴 𝗶𝗻𝗵𝗲𝗿𝗶𝘁𝗮𝗻𝗰𝗲
import java.util.*;
class superclass
{
int a,b;
Scanner sc=new Scanner(System.in);
public void get()
{
System.out.println("Enter any two integer values to be added");
a=sc.nextInt();
b=sc.nextInt();
}
}
class sub extends superclass{
int c;
public void add(){
System.out.println("a= "+a+", b="+b+"\na+b="+(a+b));
}
}
class inhert_demo{
public static void main(String ar[]){
sub obj=new sub();
obj.get();
obj.add();
}
}

𝗤𝟭𝟰. 𝗠𝗲𝘁𝗵𝗼𝗱 𝗼𝘃𝗲𝗿𝗿𝗶𝗱𝗶𝗱𝗻𝗴 𝗲𝘅𝗮𝗺𝗽𝗹𝗲𝘀.
class A
{
public void add(int a,int b)
{
System.out.println("Add fuction for integers values");
System.out.println("a="+a+", b= "+b+"\n a+b="+(a+b));
}
public void add(float a,float b){
System.out.println("Add fuction for float values");
System.out.println("a="+a+", b= "+b+"\n a+b="+(a+b));
}
}
class overloaddemo{
public static void main(String ar[]){
A a=new A();
a.add(3,4);
a.add(3.5f,4.5f);
}
}


𝗤𝟭𝟱. 𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝗼𝗳 𝘀𝘁𝗿𝗶𝗻𝗴 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻.
import java.io.*;
class strdemo
{
public static void main(String args[])
{
String st1=new String("DURGESH");
String st2=new String("Durgesh");
String st3=new String("Chaubey");
int i=st1.length();
System.out.println("Length of the string st1\t"+st1+" is  "+i);
System.out.println("The string st1\t"+st1+" and st2\t"+st2+" are equal->"+st1.equals(st2));
System.out.println("The string st1\t"+st1+" and st2\t"+st2+" are equal ignoring the case->"+st1.equalsIgnoreCase(st2));
String st4=st1.toLowerCase();
System.out.println(st2+" after converting case ->"+st4);
System.out.println("The character at specified index of string st1\t"+st1+"  -> "+st1.charAt(3));
System.out.println("The string concatenation\t"+st1.concat(st3));
}
}


𝗤𝟭𝟲. 𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝗼𝗳 𝗰𝗼𝗻𝘀𝘁𝗿𝘂𝗰𝘁𝗼𝗿
import java.util.*;
class superclass
{
int a;
int b,c;
Scanner sc=new Scanner(System.in);
superclass()
{
System.out.println("Assigning values by non-parametrized constructor");
System.out.println("Enter the values");
System.out.print("a=  ");
a=sc.nextInt();
System.out.print("b=  ");
b=sc.nextInt();
}
public void addition()
{
System.out.println("a= "+a);
System.out.println("b= "+b);
c=a+b;
System.out.println("a+b= "+c);
}}
class cons_demo3{
public static void main(String ar[])
{
superclass s1=new superclass();
s1.addition();
}
}


𝗤𝟭𝟳. 𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝗼𝗳 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗿𝗶𝘇𝗲𝗱 𝗰𝗼𝗻𝘀𝘁𝗿𝘂𝗰𝘁𝗼𝗿.
import java.util.*;
class rect_ar
{
float len,br,ar;
public rect_ar(float a,float b)
{
len=a;
br=b;
}
public float rect_area()
{
return len*br;
}
}
class para_cons
{
public static void main(String args[])
{
float l,b,area;
Scanner sc=new Scanner(System.in);
System.out.println("enter the length of the rectangle");
l=sc.nextFloat();
System.out.println("enter the length of the rectangle");
b=sc.nextFloat();
rect_ar r1=new rect_ar(l,b);
area=r1.rect_area();
System.out.println("Area of the rectangle is"+area);
}
}


𝗤𝟭𝟴. 𝗔𝗿𝗿𝗮𝘆 𝗲𝘅𝗮𝗺𝗽𝗹𝗲.
import java.util.*;
class arr_ex
{
public static void main(String args[])
{
int arr[]=new int[100];
int size;
Scanner sc=new Scanner(System.in);
System.out.println("Enter the length of the array\nsize=");
size=sc.nextInt();
System.out.println("Enter the elements of the array");
for(int i=0;i<size;i++)
{
System.out.println("arr["+i+"]=");
arr[i]=sc.nextInt();}
System.out.println("Elements of the array are");
for(int i=0;i<size;i++)
{
System.out.println("arr["+i+"]="+arr[i]);
}
}
}


𝗤𝟭𝟵. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝗶𝗻 𝗷𝗮𝘃𝗮: 𝘁𝗵𝗮𝘁 𝗿𝗲𝗮𝗱𝘀 𝗮𝗻 𝘂𝗻𝘀𝗽𝗲𝗰𝗶𝗳𝗶𝗲𝗱 𝗻𝘂𝗺𝗯𝗲𝗿 𝗼𝗳 𝗮𝗻 𝗶𝗻𝘁𝗲𝗴𝗲𝗿 𝗮𝗿𝗴𝘂𝗺𝗲𝗻𝘁 𝗳𝗿𝗼𝗺 𝘁𝗵𝗲 𝗰𝗼𝗺𝗺𝗮𝗻𝗱 𝗹𝗶𝗻𝗲. 𝗙𝗶𝗻𝗱 𝗺𝗲𝗮𝗻 𝗮𝗻𝗱 𝘀𝘁𝗮𝗻𝗱𝗮𝗿𝗱 𝗱𝗲𝘃𝗶𝗮𝘁𝗶𝗼𝗻. (𝗶𝗶)𝗣𝗿𝗶𝗻𝘁 𝘁𝗵𝗲 𝗮𝗯𝗼𝘃𝗲 𝗶𝗻𝗳𝗼𝗿𝗺𝗮𝘁𝗶𝗼𝗻.
import java.util.*;
class find_mean_sd{
public static void main(String args[])
{
double num[]=new double[100];
double temp,mean,sd,temp3,temp4;
temp=0;
temp3=0;
Scanner sc=new Scanner(System.in);
int length,i;
System.out.print("Enter the limit,how many numbers do you want to enter\n length=");
length=sc.nextInt();
double temp2[]=new double[length];
System.out.println("Enter the numbers");
for(i=0;i<length;i++)
{
System.out.print("num["+i+"]=  ");
num[i]=sc.nextFloat();
}
System.out.println("Entered numbers are");
for(i=0;i<length;i++)
{
System.out.println("num["+i+"]=  "+num[i]);
}
for(i=0;i<length;i++)
{
temp=temp+num[i];
}
mean=temp/length;
System.out.println("The mean is"+mean);
for(i=0;i<length;i++)
{
temp2[i]=(num[i]-mean)*(num[i]-mean);
temp3=temp3+temp2[i];}
temp4=(temp3)/length;
sd=Math.sqrt(temp4);
System.out.println("The standard deviation is"+sd);
}
}


𝗤𝟮𝟬. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗱𝗲𝗺𝗼𝗻𝘀𝘁𝗿𝗮𝘁𝗲 𝗺𝗲𝘁𝗵𝗼𝗱 𝗼𝘃𝗲𝗿𝗿𝗶𝗱𝗶𝗻𝗴.
class A
{
int a,b;
public A(int x,int y)
{
a=x;
b=y;
}
public void add()
{
System.out.println("calling add function from the super class");
System.out.println("Addition of the numbers "+a+" and "+b+" is"+(a+b));
}
}
class B extends A
{
int c;
public B(int x,int y,int z)
{
super(x,y);
c=z;
}
public void add()
{
System.out.println("calling add function from the sub class");
System.out.println("Addition of the numbers "+a+" ,"+b+" and"+c+" is"+(a+b+c));
}
}
class overridedemo{
public static void main(String args[])
{
A obj= new A(3,4);
obj.add();
B obj1=new B(4,5,6);
obj1.add();
}
}


𝗤𝟮𝟭. 𝗪𝗿𝗶𝘁𝗲 𝗮 𝗽𝗿𝗼𝗴𝗿𝗮𝗺 𝘁𝗼 𝗮𝗱𝗱 𝘁𝗼 𝗺𝗮𝘁𝗿𝗶𝗰𝗲𝘀.
import java.util.*;
class matrix_add
{
int a[][]=new int[3][3];
int b[][]=new int[3][3];
int i,j;
Scanner sc=new Scanner(System.in);
public void getelement()
{
System.out.println("Enter the elements of the first matrix");
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
System.out.print("a["+(i+1)+"]["+(j+1)+"]=");
a[i][j]=sc.nextInt();
}
}
System.out.println("Enter the elements of the second matrix");
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
System.out.print("a["+(i+1)+"]["+(j+1)+"]=");
b[i][j]=sc.nextInt();
}
}
}
public void show()
{
System.out.println("The first matrix is");
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
System.out.print("  a["+(i+1)+"]["+(j+1)+"]="+a[i][j]);
}
System.out.print("\n");
}
System.out.println("Enter the elements of the second matrix");
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
System.out.print("  b["+(i+1)+"]["+(j+1)+"]="+b[i][j]);
}
System.out.print("\n");
}
}
public void add()
{
System.out.println("The added matrix is\n");
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
System.out.print("   c["+(i+1)+"]["+(j+1)+"]="+(a[i][j]+b[i][j]));
}
System.out.print("\n");
}
}
}
class mat_add_demo{
public static void main(String args[])
{
matrix_add m=new matrix_add();
m.getelement();
m.show();
m.add();
}
}


𝗤𝟮𝟮. 𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝗼𝗳 𝗠𝘂𝗹𝘁𝗶-𝘁𝗵𝗿𝗲𝗮𝗱𝗶𝗻𝗴 𝗯𝘆 𝗰𝗿𝗲𝗮𝘁𝗲 𝗮 𝘁𝗵𝗿𝗲𝗮𝗱 𝘁𝗵𝗮𝘁 𝗶𝗺𝗽𝗹𝗲𝗺𝗲𝗻𝘁𝘀 𝗥𝘂𝗻𝗻𝗮𝗯𝗹𝗲 𝗶𝗻𝘁𝗲𝗿𝗳𝗮𝗰𝗲.
class newthread implements Runnable
{
Thread t;
newthread()
{
t=new Thread(this,"Demo Thread");
System.out.println("Child thread: "+t);
t.start();
}
public void run()
{
try{
for(int i=5;i>0;i--)
{
System.out.println("Child thread: "+i);
Thread.sleep(500);}
}catch(InterruptedException e){
System.out.println("Child interrupted.");
}
System.out.println("Exiting child thread");
}
}
class threaddemo
{
public static void main(String args[])
{
new newthread();
try
{
for(int i=5;i>0;i--)
{
System.out.println("Main thread: "+i);
Thread.sleep(1000);
}
}catch(InterruptedException e){
System.out.println("Child interrupted.");
}
System.out.println("Exiting child thread");
}
}


